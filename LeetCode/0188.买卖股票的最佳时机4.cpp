#include "header.h"

/*

188. 买卖股票的最佳时机 IV

给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格。
设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1：
输入：k = 2, prices = [2,4,1]
输出：2
解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 

示例 2：
输入：k = 2, prices = [3,2,6,5,0,3]
输出：7
解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 
随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 


提示：
0 <= k <= 100
0 <= prices.length <= 1000
0 <= prices[i] <= 1000

*/

class Solution {
public:
	int maxProfit(int k, vector<int> &prices) {
		int len = prices.size();
		if (len <= 0) return 0;
		if (k > len / 2) return maxProfit_infk(prices);
		vector<vector<vector<int>>> dp(len, vector<vector<int>>(k + 1, vector<int>(2, 0)));
		for (int i = 0; i < len; ++i) {
			for (int j = 1; j <= k; ++j) {
				if (i == 0) {
					// 对于交易次数为0的两种初始状态，未持有股票时，初始值自然为0
					// 持有股票的这种情况未使用到，所以没有针对交易次数为0的初始状态特别设置初值
					dp[i][j][0] = 0;
					dp[i][j][1] = -prices[i];
					continue;
				}
				dp[i][j][0] = max(dp[i - 1][j][0], dp[i - 1][j][1] + prices[i]);
				dp[i][j][1] = max(dp[i - 1][j][1], dp[i - 1][j - 1][0] - prices[i]);
			}
		}
		return dp[len - 1][k][0];
	}

private:
	int maxProfit_infk(vector<int> &prices) {
		int len = prices.size();
		if (len <= 0) return 0;
		vector<vector<int>> dp(len, vector<int>(2, 0));
		for (int i = 0; i < len; ++i) {
			if (i - 1 == -1) {
				dp[i][0] = 0;
				dp[i][1] = -prices[i];
				continue;
			}
			dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
			dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
		}
		return dp[len - 1][0];
	}
};
